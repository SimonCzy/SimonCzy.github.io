<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Command</title>
    <url>/2023/02/15/Docker-Command/</url>
    <content><![CDATA[<p>Frequently used docker commands</p>
<span id="more"></span>

<h2 id="Docker-Quick-Start"><a href="#Docker-Quick-Start" class="headerlink" title="Docker Quick Start"></a>Docker Quick Start</h2><h3 id="Create-docker-image-from-Dockerfile"><a href="#Create-docker-image-from-Dockerfile" class="headerlink" title="Create docker image from Dockerfile"></a>Create docker image from Dockerfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run the command in the folder which contains Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user@computer odoo_test % ls  -la</span></span><br><span class="line"><span class="comment"># total 8</span></span><br><span class="line"><span class="comment"># drwxr-xr-x@  3 user  staff    96 Mar  6 09:42 .</span></span><br><span class="line"><span class="comment"># drwx------@ 20 user  staff   640 Mar  7 01:42 ..</span></span><br><span class="line"><span class="comment"># -rw-r--r--@  1 user  staff  1546 Mar  6 09:42 Dockerfile</span></span><br><span class="line"></span><br><span class="line">docker build -t salarymaster/odoo:odoo_12 .</span><br></pre></td></tr></table></figure>

<h3 id="Download-docker-image"><a href="#Download-docker-image" class="headerlink" title="Download docker image"></a>Download docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download from Docker Hub</span></span><br><span class="line">docker pull salarymaster/odoo:H_12.0</span><br></pre></td></tr></table></figure>

<h3 id="Upload-docker-image"><a href="#Upload-docker-image" class="headerlink" title="Upload docker image"></a>Upload docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upload to Docker Hub</span></span><br><span class="line">docker push salarymaster/odoo:odoo_12</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;salarymaster&quot; is the name of organization/user</span></span><br><span class="line"><span class="comment"># &quot;odoo&quot; is the repository name created by &quot;salarymaster&quot;</span></span><br><span class="line"><span class="comment"># &quot;odoo_12&quot; is the tag in &quot;odoo&quot; repository to distinguish different version of docker images</span></span><br></pre></td></tr></table></figure>

<h3 id="List-docker-image"><a href="#List-docker-image" class="headerlink" title="List docker image"></a>List docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="Run-docker-image-x2F-Create-image-instance-container"><a href="#Run-docker-image-x2F-Create-image-instance-container" class="headerlink" title="Run docker image &#x2F; Create image instance (container)"></a>Run docker image &#x2F; Create image instance (container)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this command will maintain the container even exiting</span></span><br><span class="line">docker run -itu root salarymaster/odoo:basic /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="Tag-docker-image"><a href="#Tag-docker-image" class="headerlink" title="Tag docker image"></a>Tag docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ImageID comes from &quot;docker image ls&quot; command</span></span><br><span class="line">docker tag ImageID salarymaster/odoo:new_tagname</span><br></pre></td></tr></table></figure>

<h3 id="Remove-docker-image"><a href="#Remove-docker-image" class="headerlink" title="Remove docker image"></a>Remove docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if ImageID is unique, use ImageID to remove</span></span><br><span class="line">docker image <span class="built_in">rm</span> ImageID</span><br><span class="line"></span><br><span class="line"><span class="comment"># if ImageID is not unique, use unique combination tag to remove</span></span><br><span class="line">docker image <span class="built_in">rm</span> OrgName/RepName:TagName</span><br></pre></td></tr></table></figure>

<h3 id="List-docker-container"><a href="#List-docker-container" class="headerlink" title="List docker container"></a>List docker container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list using containers</span></span><br><span class="line">docker ps </span><br><span class="line"></span><br><span class="line"><span class="comment"># list all the containers</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<h3 id="Start-x2F-Stop-x2F-Restart-docker-container"><a href="#Start-x2F-Stop-x2F-Restart-docker-container" class="headerlink" title="Start&#x2F;Stop&#x2F;Restart docker container"></a>Start&#x2F;Stop&#x2F;Restart docker container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start ContainerID</span><br><span class="line">docker stop ContainerID</span><br><span class="line">docker restart ContainerID</span><br></pre></td></tr></table></figure>

<h3 id="Copy-file-using-docker-container"><a href="#Copy-file-using-docker-container" class="headerlink" title="Copy file using docker container"></a>Copy file using docker container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy file from container to local</span></span><br><span class="line">docker <span class="built_in">cp</span> ContainerID:/a/b/c.txt /aa/bb/</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy file from local to container</span></span><br><span class="line">docker <span class="built_in">cp</span> /aa/bb/ ContainerID:/a/b/c.txt</span><br></pre></td></tr></table></figure>

<h3 id="Enter-container"><a href="#Enter-container" class="headerlink" title="Enter container"></a>Enter container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -it use terminal to enter container</span></span><br><span class="line"><span class="comment"># -u use specific user to enter container</span></span><br><span class="line">docker <span class="built_in">exec</span> -itu root 1a9e7655efdc /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="Inspect-container"><a href="#Inspect-container" class="headerlink" title="Inspect container"></a>Inspect container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check the container detail</span></span><br><span class="line">docker inspect ContainerID</span><br><span class="line"><span class="comment"># or use this command to check docker log</span></span><br><span class="line">docker inspect ContainerID | grep -i <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h3 id="Debug-dead-container"><a href="#Debug-dead-container" class="headerlink" title="Debug dead container"></a>Debug dead container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy file from container to local</span></span><br><span class="line">docker <span class="built_in">cp</span> ContainerID:/a/b/c.txt /aa/bb/</span><br></pre></td></tr></table></figure>

<h3 id="Check-container-start-command"><a href="#Check-container-start-command" class="headerlink" title="Check container start command"></a>Check container start command</h3><p><img data-src="/./Docker-Command/image-20230319020733223.png" alt="image-20230319020733223"></p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Quick Check</tag>
      </tags>
  </entry>
  <entry>
    <title>A Web 502 Error Caused By A Docker Upgrade</title>
    <url>/2023/03/16/A-Web-502-Error-Caused-By-A-Docker-Upgrade/</url>
    <content><![CDATA[<p>💡 This post is insightful for the following scenarios.</p>
<ul>
<li>Handle Docker or DevOps Error</li>
<li>Server Down</li>
<li>Rookie DevOps</li>
</ul>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The docker image is upgraded. And I need to deal with the error it causes.</p>
<h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><ul>
<li>Amazon Cloud: EC2 Instance</li>
<li>Gitlab: Pipeline</li>
<li>Dockerhub</li>
</ul>
<h2 id="Operation-amp-Problem"><a href="#Operation-amp-Problem" class="headerlink" title="Operation &amp; Problem"></a>Operation &amp; Problem</h2><h3 id="1-Upgrade-the-docker-image"><a href="#1-Upgrade-the-docker-image" class="headerlink" title="1. Upgrade the docker image"></a>1. Upgrade the docker image</h3><p>Update the template in EC2 instance. Deploy a new environment by GitLab.</p>
<h3 id="2-502-Error"><a href="#2-502-Error" class="headerlink" title="2. 502 Error"></a>2. 502 Error</h3><p>Yeah…it causes 502 error obviously.</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/1.png" alt="1"></p>
<h3 id="3-Check-the-docker-container"><a href="#3-Check-the-docker-container" class="headerlink" title="3. Check the docker container"></a>3. Check the docker container</h3><p>In fact, it took quite a bit of time to jump from the previous step to this one. </p>
<p>At first, I mistakenly thought it was due to a network configuration error, so I kept checking the template and also the configuration file. But in fact, the 502 error can be interpreted as a service provisioning failure, and therefore incoming requests cannot be accessed.</p>
<p>So the first step of troubleshooting should be to check whether the service is started properly, and then start the rest of the troubleshooting later.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check all the containers</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>As we can see from the following picture, the containers started and exited many times in about 3min. It means there are some error when waking up the image</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/2.png" alt="1"></p>
<h3 id="4-Track-error-information-exitcode-126"><a href="#4-Track-error-information-exitcode-126" class="headerlink" title="4. Track error information - exitcode 126"></a>4. Track error information - exitcode 126</h3><p>Get the basic information from container.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect ContainerID</span><br></pre></td></tr></table></figure>

<p>There are some information we may be interested in.</p>
<ul>
<li>ExitCode: The reason why a container exit. You can check <a href="https://komodor.com/learn/exit-codes-in-containers-and-kubernetes-the-complete-guide/">this page</a> for more specific exitcode. It is always a error summary. For 126,  it means that a command used in the container specification could not be invoked.</li>
<li>LogPath: The location where docker containers save their log</li>
</ul>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/3.png" alt="image-20230316031409045"></p>
<p>Print out the log shown on the inspect, which is excatly a great example for <strong>exitcode-126</strong>.</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/4.png" alt="image-20230316032028422"></p>
<h3 id="5-Upgrade-docker-image-use-user-“odoo”-to-install-pyenv"><a href="#5-Upgrade-docker-image-use-user-“odoo”-to-install-pyenv" class="headerlink" title="5. Upgrade docker image - use user “odoo” to install pyenv"></a>5. Upgrade docker image - use user “odoo” to install pyenv</h3><p>As you can see from the <font color='red'>previous post</font>, the error is introduced at that time.</p>
<p>The following dockerfile sentence will install pyenv into &#x2F;root&#x2F;, which results in that user “odoo” can not call python3.8.</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># omit some sentences</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install pyenv, install python3.8.15 and make it global</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash &amp;&amp; <span class="built_in">printf</span> <span class="string">&quot;export PATH=\&quot;/root/.pyenv/bin:\$PATH\&quot;\neval \&quot;\$(pyenv init -)\&quot;\neval \&quot;\$(pyenv virtualenv-init -)\&quot;\n\nexport LC_ALL=C.UTF-8\nexport LANG=C.UTF-8&quot;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc &amp;&amp; pyenv install 3.8.15 &amp;&amp; pyenv global 3.8.15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># omit some sentences</span></span><br></pre></td></tr></table></figure>

<p>Therefore, after lots of unsuccessful trial, I choose to let odoo install the pyenv.</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># omit some sentences</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use user &quot;odoo&quot; install pyenv, install python3.8.15 and make it global</span></span><br><span class="line"><span class="keyword">USER</span> odoo</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;export PYENV_ROOT=\&quot;\$HOME/.pyenv\&quot;\ncommand -v pyenv &gt;/dev/null || export PATH=\&quot;\$PYENV_ROOT/bin:\$PATH\&quot;\neval \&quot;\$(pyenv init -)\&quot;\neval \&quot;\$(pyenv virtualenv-init -)\&quot;\n&quot;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc &amp;&amp; pyenv install 3.8.15 &amp;&amp; pyenv global 3.8.15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="comment"># omit some sentences</span></span><br></pre></td></tr></table></figure>

<h3 id="6-Upload-docker-image-to-docker-hub"><a href="#6-Upload-docker-image-to-docker-hub" class="headerlink" title="6. Upload docker image to docker hub"></a>6. Upload docker image to docker hub</h3><p>After downloading lots of third-party libraries, the size of image increased to almost 10GB.</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/5.png" alt="image-20230317112956700"></p>
<p>There’s not much more to say. In the future, I will only recommend using the command line for uploading docker images that are too large, which took me 5 hours to learn this lesson.</p>
<h3 id="7-502-Error"><a href="#7-502-Error" class="headerlink" title="7. 502 Error"></a>7. 502 Error</h3><p>🧘‍♀️ Take it easy.</p>
<h3 id="8-Fail-to-download-docker-image-in-server"><a href="#8-Fail-to-download-docker-image-in-server" class="headerlink" title="8. Fail to download docker image in server"></a>8. Fail to download docker image in server</h3><p>Though I click the “Run” button in the pipeline, I still can not find any containers on the server.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check new version container</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># check new version image</span></span><br><span class="line">docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>After waiting for a long time, I still can not see the new version image. At this time, you can download it by yourself.</p>
<p>BTW, The way for the server to download a docker image:</p>
<ul>
<li>docker hub first, local then</li>
<li>check the docker hub if the version updated (imageID)</li>
</ul>
<h3 id="9-502-Error"><a href="#9-502-Error" class="headerlink" title="9. 502 Error"></a>9. 502 Error</h3><p>🧘‍♀️</p>
<h3 id="10-Track-error-information-exitcode-127"><a href="#10-Track-error-information-exitcode-127" class="headerlink" title="10. Track error information - exitcode 127"></a>10. Track error information - exitcode 127</h3><p>Here is the log</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/6.png" alt="image-20230319230931264"></p>
<p>Here is some python feature. Some .py files will put “#!&#x2F;usr&#x2F;bin&#x2F;env python3” in their first line. Therefore, the file can be run by system python3 parser.</p>
<p>According to the log, there seems to be no python in this image, which is completely different from my local environment.</p>
<p>As the docker is run by the command “&#x2F;entrypoint.sh odoo”, I need to debug by putting some output in the entrypoint.sh to see what is going on.</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/7.png" alt="image-20230319231749335"></p>
<p>Here comes the result.</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/8.png" alt="image-20230319232203595"></p>
<p>Fxck, it takes me about 4 hours. And the reason is that the .yaml file of this image change the folder.</p>
<p><img data-src="/./A-Web-502-Error-Caused-By-A-Docker-Upgrade/9.png" alt="image-20230319233445111"></p>
<p>Then just need to update the docker to change the pyenv location.</p>
<p>After reading the pyenv-installer script, I set up the env variable $PYENV_ROOT by dockerfile. And finally, everything works well!</p>
<h3 id="11-Winner-Winner-Chicken-Dinner"><a href="#11-Winner-Winner-Chicken-Dinner" class="headerlink" title="11. Winner Winner Chicken Dinner"></a>11. Winner Winner Chicken Dinner</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://komodor.com/learn/exit-codes-in-containers-and-kubernetes-the-complete-guide/">Exit Codes In Containers &amp; Kubernetes – The Complete Guide</a></li>
</ul>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Troubleshoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Linux By BIOS On Window Machine</title>
    <url>/2023/03/15/Install-Linux-By-BIOS-On-Window-Machine/</url>
    <content><![CDATA[<p>💡 This post is insightful for the following scenarios.</p>
<ul>
<li>Install System</li>
<li>Enter BIOS</li>
<li>Install Linux</li>
</ul>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The long term use of the virtual machine took up my macOS system resources, so I considered using the small server I purchased to install ubuntu (16+512). 🤔️</p>
<h2 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h2><h3 id="1-Preparation"><a href="#1-Preparation" class="headerlink" title="1. Preparation"></a>1. Preparation</h3><p>Firstly, you should have a window machine.</p>
<p>Then, you should know <strong>the way to enter your machine BIOS</strong>. Generally speaking, different computers have very different ways of turning on the BIOS. Therefore, you’d better ask your computer provider or related technical support.</p>
<p>Last, you should have a USB flash drive (at least 8g).</p>
<h3 id="2-Intall-an-Ubuntu-image"><a href="#2-Intall-an-Ubuntu-image" class="headerlink" title="2. Intall an Ubuntu image"></a>2. Intall an Ubuntu image</h3><p>Click <a href="https://ubuntu.com/download/desktop">this page</a> to download the Ubuntu you want. As I want to download 20.04 LTS, I need to go to <a href="https://ubuntu.com/download/alternative-downloads">alternative page</a> to search.</p>
<p><img data-src="/./Install-Linux-By-BIOS-On-Window-Machine/1.png" alt="image-20230315184213566"></p>
<h3 id="3-Create-a-bootable-USB-stick"><a href="#3-Create-a-bootable-USB-stick" class="headerlink" title="3. Create a bootable USB stick"></a>3. Create a bootable USB stick</h3><p>Use <a href="https://www.balena.io/etcher/">balenaEtcher</a> to create bootable USB stick. You should select your .iso file and your USB flash drive. It may take about 5mins.</p>
<h3 id="4-Enter-your-machine-BIOS"><a href="#4-Enter-your-machine-BIOS" class="headerlink" title="4. Enter your machine BIOS"></a>4. Enter your machine BIOS</h3><p>My computer is made from KNOKA.</p>
<p><img data-src="/./Install-Linux-By-BIOS-On-Window-Machine/2.PNG" alt="IMG_1556"></p>
<p><img data-src="/./Install-Linux-By-BIOS-On-Window-Machine/3.PNG" alt="IMG_1556"></p>
<p>The way to enter its BIOS is KEEP CLICKING “Delete” BUTTON UNTIL BIOS SHOW UP.</p>
<p>So, what you should do now is</p>
<ol>
<li>Turn off your machine</li>
<li>Insert your bootable USB stick</li>
<li>Enter BIOS</li>
</ol>
<p>When you finish it, you should see the BIOS (1980s style of GUI 🥸).</p>
<p><img data-src="/./Install-Linux-By-BIOS-On-Window-Machine/4.jpeg" alt="4"></p>
<h3 id="5-Boot-from-your-USB-stick"><a href="#5-Boot-from-your-USB-stick" class="headerlink" title="5. Boot from your USB stick"></a>5. Boot from your USB stick</h3><p>Selete the USB stick and move to the highest option.</p>
<p><img data-src="/./Install-Linux-By-BIOS-On-Window-Machine/5.jpeg" alt="5"></p>
<h3 id="6-Install-your-Ubuntu"><a href="#6-Install-your-Ubuntu" class="headerlink" title="6. Install your Ubuntu"></a>6. Install your Ubuntu</h3><p>Just do what you want</p>
<h3 id="7-Turn-on-your-Wi-Fi-adapter-optional"><a href="#7-Turn-on-your-Wi-Fi-adapter-optional" class="headerlink" title="7. Turn on your Wi-Fi adapter (optional)"></a>7. Turn on your Wi-Fi adapter (optional)</h3><p>Some times you may find that you can’t use the Wi-Fi after successful installation 🤡, this may be due to the Wi-Fi driver or system first installation. I solved it by the following command.</p>
<p>(Sadly, you need to connect to the Internet first if you want to use Wi-Fi module, like wired connection or wireless network USB)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install bcmwl-kernel-source</span><br></pre></td></tr></table></figure>

<p>Then, restart your system.</p>
<h3 id="8-Turn-on-your-Ubuntu-Software-optional"><a href="#8-Turn-on-your-Ubuntu-Software-optional" class="headerlink" title="8. Turn on your Ubuntu Software (optional)"></a>8. Turn on your Ubuntu Software (optional)</h3><p>Some times you may find that your Ubuntu Software market is nearly empty 🤡. I solved it by the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo systemctl reboot</span><br></pre></td></tr></table></figure>

<h3 id="9-Ture-on-Chinese-language-optional"><a href="#9-Ture-on-Chinese-language-optional" class="headerlink" title="9. Ture on Chinese language (optional)"></a>9. Ture on Chinese language (optional)</h3><ol>
<li>Setting -&gt; Language and Region -&gt; Manage Installed Languages -&gt; Install &#x2F; Remove Language -&gt; Click Chinese (Simplified), then install whatever it needed</li>
<li>Setting -&gt; Language and Region -&gt; Input Sources -&gt; “+” &gt; Chinses &gt; Chinses (Intelligent Pinyin)</li>
</ol>
<h3 id="10-Enjoy-your-new-Ubuntu-system"><a href="#10-Enjoy-your-new-Ubuntu-system" class="headerlink" title="10. Enjoy your new Ubuntu system!"></a>10. Enjoy your new Ubuntu system!</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Thanks to the following articles guidance:</p>
<ul>
<li><a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">Install Ubuntu desktop</a></li>
<li><a href="https://download.csdn.net/download/weixin_38724663/14048620?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-download-2~default~CTRLIST~Paid-1-14048620-blog-107869060.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-download-2~default~CTRLIST~Paid-1-14048620-blog-107869060.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=1">Ubuntu 20.04 wireless connection</a></li>
<li><a href="https://blog.csdn.net/eidolon_foot/article/details/112942564">Ubuntu 20.04 software market error</a></li>
<li><a href="https://bbs.huaweicloud.com/blogs/283088">Add Chinese into Ubuntu 20.04</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>BIOS</tag>
        <tag>Env/Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile Command</title>
    <url>/2023/03/07/Dockerfile-Command/</url>
    <content><![CDATA[<p>Frequently used dockerfile commands</p>
<span id="more"></span>

<h2 id="Dockerfile-Quick-Start"><a href="#Dockerfile-Quick-Start" class="headerlink" title="Dockerfile Quick Start"></a>Dockerfile Quick Start</h2><h3 id="Change-user"><a href="#Change-user" class="headerlink" title="Change user"></a>Change user</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> root</span><br></pre></td></tr></table></figure>

<h3 id="Run-bash-command"><a href="#Run-bash-command" class="headerlink" title="Run bash command"></a>Run bash command</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /a/b/c.txt /aa/bb/cc.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="Get-raw-docker-image"><a href="#Get-raw-docker-image" class="headerlink" title="Get raw docker image"></a>Get raw docker image</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> salarymaster/odoo:office_odoo12</span><br></pre></td></tr></table></figure>

<h3 id="Copy-local-file-into-docker-image"><a href="#Copy-local-file-into-docker-image" class="headerlink" title="Copy local file into docker image"></a>Copy local file into docker image</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./requirements.txt /</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-some-environment-varible"><a href="#Set-some-environment-varible" class="headerlink" title="Set some environment varible"></a>Set some environment varible</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> PYENV_ROOT=/var/local/pyenv</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Quick Check</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Odoo12 On Ubuntu20.04</title>
    <url>/2023/03/08/Install-Odoo12-On-Ubuntu20-04/</url>
    <content><![CDATA[<p>💡 This post is insightful for the following scenarios.</p>
<ul>
<li>Odoo Installation</li>
<li>Non-Interactive Timezone Configuration</li>
</ul>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>To avoid Odoo corrupting my noble macOS 🤫, I’ve decided to install Odoo on Ubuntu.</p>
<h2 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h2><h3 id="1-Preparation"><a href="#1-Preparation" class="headerlink" title="1. Preparation"></a>1. Preparation</h3><p>Of course, you need to have Ubuntu which is <strong>20.04</strong> and it need to be able to connect the Internet.</p>
<p>And I will use X86 (amd64) in this post because I am not a masochist.</p>
<h3 id="2-Install-Git"><a href="#2-Install-Git" class="headerlink" title="2. Install Git"></a>2. Install Git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you may need to add &quot;sudo&quot; in front of the sentence if you don&#x27;t have the permission</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y git</span><br></pre></td></tr></table></figure>

<h3 id="3-Timezone-Configuration-Optional"><a href="#3-Timezone-Configuration-Optional" class="headerlink" title="3.  Timezone Configuration (Optional)"></a>3.  Timezone Configuration (Optional)</h3><p>Who can Skip this step</p>
<ul>
<li>Already configure the timezone information (like GUI version)</li>
<li>Can configure timezone infomation manually (which will appear in Step 4)</li>
</ul>
<p>Who cannoy skip this step (or you will be stuck in the interactive interface in Step 4)</p>
<ul>
<li>Automated management</li>
<li>Create a docker image</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use default setting firstly</span></span><br><span class="line"><span class="built_in">export</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line">apt-get install tzdata</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set local time to Australia/Sydney time</span></span><br><span class="line"><span class="built_in">ln</span> -fs /usr/share/zoneinfo/Australia/Sydney /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># activate the new time configuration</span></span><br><span class="line">dpkg-reconfigure -f noninteractive tzdata</span><br></pre></td></tr></table></figure>

<h3 id="4-Install-PostgreSQL"><a href="#4-Install-PostgreSQL" class="headerlink" title="4. Install PostgreSQL"></a>4. Install PostgreSQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the version I downloaded is postgresql12</span></span><br><span class="line">apt-get install -y postgresql</span><br></pre></td></tr></table></figure>

<p><font color='red'><u><em>not finished yet</em></u></font></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Env/Config</tag>
        <tag>Odoo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Command</title>
    <url>/2023/03/07/Linux-Command/</url>
    <content><![CDATA[<p>Frequently used linux commands</p>
<span id="more"></span>

<h2 id="Linux-Quick-Start"><a href="#Linux-Quick-Start" class="headerlink" title="Linux Quick Start"></a>Linux Quick Start</h2><h3 id="grep-file-ignoring-case"><a href="#grep-file-ignoring-case" class="headerlink" title="grep file ignoring case"></a>grep file ignoring case</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la | grep -i <span class="string">&quot;pypdf2&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Quick Check</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac SSH Amazon Using Pem</title>
    <url>/2023/03/09/Mac-SSH-Amazon-Using-Pem/</url>
    <content><![CDATA[<p>💡 This post is insightful for the following scenarios.</p>
<ul>
<li>Use .pem file to ssh</li>
</ul>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>The title has said enough</p>
<h2 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h2><h3 id="1-Put-pem-file-in-folder-XXX"><a href="#1-Put-pem-file-in-folder-XXX" class="headerlink" title="1. Put .pem file in folder XXX"></a>1. Put .pem file in folder XXX</h3><h3 id="2-Open-terminal-in-folder-XXX"><a href="#2-Open-terminal-in-folder-XXX" class="headerlink" title="2. Open terminal in folder XXX"></a>2. Open terminal in folder XXX</h3><h3 id="3-Run-SSH-command-to-connect"><a href="#3-Run-SSH-command-to-connect" class="headerlink" title="3. Run SSH command to connect"></a>3. Run SSH command to connect</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i <span class="string">&quot;key.pem&quot;</span> username@ipaddress</span><br></pre></td></tr></table></figure>

<h3 id="4-Permission-error-probably"><a href="#4-Permission-error-probably" class="headerlink" title="4. Permission error (probably)"></a>4. Permission error (probably)</h3><p>![permission error](.&#x2F;Mac-SSH-Amazon-Using-Pem&#x2F;permission error.png)</p>
<p>What you need to do is to set up a suitable file permission (0600).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 0600 key.pem</span><br></pre></td></tr></table></figure>

<p>Then run the command given in step 3. And this time there is no error message.</p>
<h3 id="5-If-you-want-to-add-pem-file-into-your-system…"><a href="#5-If-you-want-to-add-pem-file-into-your-system…" class="headerlink" title="5. If you want to add .pem file into your system…"></a>5. If you want to add .pem file into your system…</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add -K key.pem</span><br><span class="line">ssh username@ipaddress</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Env/Config</tag>
        <tag>MacOS</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Pip Command</title>
    <url>/2023/03/07/Pip-Command/</url>
    <content><![CDATA[<p>Frequently used pip commands</p>
<span id="more"></span>

<h2 id="Pip-Quick-Start"><a href="#Pip-Quick-Start" class="headerlink" title="Pip Quick Start"></a>Pip Quick Start</h2><p>Take pip3 as an example.</p>
<h3 id="List-installed-package"><a href="#List-installed-package" class="headerlink" title="List installed package"></a>List installed package</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 list</span><br></pre></td></tr></table></figure>

<h3 id="Display-the-details-of-a-specific-package"><a href="#Display-the-details-of-a-specific-package" class="headerlink" title="Display the details of a specific package"></a>Display the details of a specific package</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume the package &quot;pdf2image&quot; has been installed</span></span><br><span class="line">pip3 show pdf2image</span><br></pre></td></tr></table></figure>

<h3 id="Create-a-requirement-file-by-using-current-installed-packages"><a href="#Create-a-requirement-file-by-using-current-installed-packages" class="headerlink" title="Create a requirement file by using current installed packages"></a>Create a requirement file by using current installed packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="Install-packages-by-using-the-requirement-file"><a href="#Install-packages-by-using-the-requirement-file" class="headerlink" title="Install packages by using the requirement file"></a>Install packages by using the requirement file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="Install-specific-version-packages"><a href="#Install-specific-version-packages" class="headerlink" title="Install specific version packages"></a>Install specific version packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install lxml=4.9.2</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Quick Check</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade Official Odoo12 Image From py3.5 To py3.8</title>
    <url>/2023/03/08/Upgrade-Official-Odoo12-Image-From-py3-5-To-py3-8/</url>
    <content><![CDATA[<p>💡 This post is insightful for the following scenarios.</p>
<ul>
<li>Python Upgrade</li>
<li>Docker Creation</li>
<li>Odoo Dependencies</li>
</ul>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Due to the updated project requirements, we need to use new third-party libraries that require a newer version of Python. However, the Python version provided in the <strong>official Odoo 12.0 Docker image</strong> is too outdated, so we need to upgrade the Python version from 3.5 to 3.8.</p>
<p>Here I will use pyenv to upgrade the python version. And the final dockerfile will be offered in the end.</p>
<p>Environment: odoo:12.0 (<a href="https://hub.docker.com/layers/library/odoo/12.0/images/sha256-6521005019c9f11e83f1c5419aab961f7e6a4f9757347df2ff0e103024e96b73?context=explore">link</a>)</p>
<h2 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h2><h3 id="1-Install-the-dependencies-for-python-3-8"><a href="#1-Install-the-dependencies-for-python-3-8" class="headerlink" title="1. Install the dependencies for python 3.8"></a>1. Install the dependencies for python 3.8</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install the dependencies for python3.8</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y default-libmysqlclient-dev build-essential git gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev libldap2-dev libsasl2-dev</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Set-the-environment-variable-PYENV-ROOT-for-pyenv"><a href="#2-Set-the-environment-variable-PYENV-ROOT-for-pyenv" class="headerlink" title="2. Set the environment variable $PYENV_ROOT for pyenv"></a>2. Set the environment variable $PYENV_ROOT for pyenv</h3><p>Reason: the docker will be run by user “odoo”. Therefore, we should set up a python path that can be accessed by user “odoo”</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> PYENV_ROOT=/var/local/pyenv/</span><br></pre></td></tr></table></figure>

<h3 id="3-Install-python-3-8-by-pyenv"><a href="#3-Install-python-3-8-by-pyenv" class="headerlink" title="3. Install python 3.8 by pyenv"></a>3. Install python 3.8 by pyenv</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install python 3.8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /var/local/pyenv/bin/pyenv install 3.8.15 &amp;&amp; /var/local/pyenv/bin/pyenv global 3.8.15</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Change-python-3-5-gt-python-3-8-for-odoo-binary-file"><a href="#4-Change-python-3-5-gt-python-3-8-for-odoo-binary-file" class="headerlink" title="4. Change python 3.5 -&gt; python 3.8 for odoo binary file"></a>4. Change python 3.5 -&gt; python 3.8 for odoo binary file</h3><p>The way to test if the odoo can run in odoo offcial docker image, is to input “odoo” and click “enter” button.<br><img data-src="/./source/Upgrade-Official-Odoo12-Image-From-py3-5-To-py3-8/1.png"></p>
<p>How do you know which python it is using? Let try!</p>
<p><img data-src="/./Upgrade-Official-Odoo12-Image-From-py3-5-To-py3-8/2.png" alt="image-20230320000006374"></p>
<p>Well. Now is easy. Just create a soft link to current python3.</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> /usr/bin/python3 &amp;&amp; <span class="built_in">ln</span> -s /var/local/pyenv/shims/python3 /usr/bin/python3</span></span><br></pre></td></tr></table></figure>

<h3 id="5-List-all-the-python-3-5-package-and-try-to-install-them-into-python-3-8-package"><a href="#5-List-all-the-python-3-5-package-and-try-to-install-them-into-python-3-8-package" class="headerlink" title="5. List all the python 3.5 package and try to install them into python 3.8 package"></a>5. List all the python 3.5 package and try to install them into python 3.8 package</h3><p>Use this command to see current package.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check current package</span></span><br><span class="line">pip3 list</span><br><span class="line"></span><br><span class="line"><span class="comment"># output current package as requirements.txt</span></span><br><span class="line">pip3 freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p><img data-src="/3.png"></p>
<p>Here comes some principle that I follow:</p>
<ul>
<li>For some packages you can not download it by pip, like odoo,  you should completely move it from 3.5 package to 3.8 package, including package itself and its information (.egg-info file)</li>
<li>For some packages version you can directly download and use, you should download it to avoid unexpected error.</li>
<li>For some pacgage version you cannot download or cannot use, you should download the newest version.</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install odoo dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /usr/lib/python3/dist-packages/odoo /var/local/pyenv/versions/3.8.15/lib/python3.8/site-packages/odoo &amp;&amp; <span class="built_in">mv</span> /usr/lib/python3/dist-packages/odoo-12.0.post20211006.egg-info/ /var/local/pyenv/versions/3.8.15/lib/python3.8/site-packages/odoo-12.0.post20211006.egg-info/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># you should put dockerfile and requirements.txt in the same folder</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./requirements.txt /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /var/local/pyenv/shims/pip install -r /requirements.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="6-Change-to-user-“odoo”"><a href="#6-Change-to-user-“odoo”" class="headerlink" title="6. Change to user “odoo”"></a>6. Change to user “odoo”</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> odoo</span><br></pre></td></tr></table></figure>

<h3 id="7-Build-the-docker-image"><a href="#7-Build-the-docker-image" class="headerlink" title="7. Build the docker image"></a>7. Build the docker image</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t UserName/RepName:TagName .</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="./Upgrade-Official-Odoo12-Image-From-py3-5-To-py3-8/Dockerfile">Dockerfile download link</a></p>
<p><a href="./Upgrade-Official-Odoo12-Image-From-py3-5-To-py3-8/requirements.txt">requirements.txt download link</a></p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Env/Config</tag>
        <tag>Odoo</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>The First Thing You Should Know</title>
    <url>/2023/02/15/User-Manual/</url>
    <content><![CDATA[<p>🥳 Welcome to Mind Game!!!</p>
<p>📑 As the first post on my personal website, it can show you the way my thought hidden behind all my posts. Please take your time and enjoy your trip! </p>
<span id="more"></span>

<h2 id="My-Game"><a href="#My-Game" class="headerlink" title="My Game"></a>My Game</h2><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>Sort by alphabetical order.</p>
<ul>
<li>Related to specific fields<ul>
<li><strong><u>DevOps</u></strong></li>
<li><strong><u>Linux</u></strong></li>
<li><strong><u>Python</u></strong></li>
<li><strong><u>Odoo</u></strong></li>
<li><strong><u>MacOS</u></strong></li>
<li><strong><u>SSH</u></strong></li>
<li><strong><u>BIOS</u></strong></li>
</ul>
</li>
<li>Related to the purpose of posts<ul>
<li><strong><u>Env&#x2F;Config</u></strong>: To set up a new environment or make it easier to use.</li>
<li><u><strong>Introduction</strong></u>: The first thing you need to know about the new field or new shit (such as this post🤔).</li>
<li><strong><u>Quick Check</u></strong>: Mainly consists of commands, scripts, or code with a simple or no explanation.</li>
<li><strong><u>Troubleshoot</u></strong>: The way to deal with unseen mistakes. It does more focus on the way I thought 💭 than the technology I used.</li>
</ul>
</li>
</ul>
<h3 id="Todo-List"><a href="#Todo-List" class="headerlink" title="Todo List"></a>Todo List</h3><p>❓The thing that I should do (All the people should keep doing sport and sleep early, but you know…).</p>
<ul>
<li><input disabled="" type="checkbox"> Odoo Environment</li>
<li><input disabled="" type="checkbox"> Odoo Basics</li>
<li><input disabled="" type="checkbox"> Odoo Tricks</li>
<li><input disabled="" type="checkbox"> Personal Server</li>
<li><input disabled="" type="checkbox"> …</li>
</ul>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul>
<li>All blog content may be modified at some point in the future for some reason. (I will try to keep my change log, but human beings are lazy).</li>
</ul>
]]></content>
      <tags>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
